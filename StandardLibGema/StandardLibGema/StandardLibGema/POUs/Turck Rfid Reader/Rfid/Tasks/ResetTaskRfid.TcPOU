<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ResetTaskRfid" Id="{a6f40622-e2a9-44ec-88fe-5fb85757fe74}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ResetTaskRfid EXTENDS TcoCore.TcoTask
VAR_IN_OUT
    rfidInOut : RfidInOut;
END_VAR
VAR_INPUT
    ActionDesc : STRING(25);
END_VAR
VAR
    _stringBuilder : TcoCore.StringBuilder;
    _state         : INT;

    _eErrorID   : RFID_FB_U.ERROR;
    _data       : Tc2_System.T_MaxString;
    _noTagFound : BOOL;

    _offSet : UDINT;

    _resetResponseCode : UINT := 16#8000;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (THIS^.Execute()) THEN

    CASE _state OF

        10:
            _state := 20;

        20:
            //Command setzen
            rfidInOut.eCommand := RFID_FB_U.COMMAND.RESET;
            _state             := 30;
        30:
            // Start der Operation
            rfidInOut.xExecute := TRUE;

            _state := 40;
        40:
            //            IF rfidInOut.stCompactModeInputMap.eResponseCode = _resetResponseCode THEN
            IF rfidInOut.xDone THEN
                THIS^.DoneWhen(TRUE);
                //                THIS^.Messenger.Info
                //                (
                //                    _stringbuilder.Append('Lock der Daten erfolgreich')
                //                        .Append('Startadresse: ')
                //                        .Append(TO_STRING(rfidinOut.udiStartAdress))
                //                        .Append(' Laenge: ')
                //                        .Append(TO_STRING(rfidInOut.uiDataLenght))
                //                        .ToString()
                //                );

                _state := 0;
            end_IF
    END_CASE
END_IF
]]></ST>
    </Implementation>
    <Folder Name="Status" Id="{31e11f90-8be4-4f1b-932a-78bcf639a27f}" />
    <Folder Name="TcOpen" Id="{917b8048-e7ff-4656-a4bf-00568589bbec}" />
    <Property Name="ErrorId" Id="{a086539d-cae3-4c1c-a557-ea2e7d77fa38}" FolderPath="Status\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ErrorId : RFID_FB_U.ERROR]]></Declaration>
      <Get Name="Get" Id="{e486529c-fa47-4882-928d-9fef0e879ef1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[{warning disable C0371}
ErrorId := _eErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{9f2db2e5-9610-4f17-be53-a86b5ac73736}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode  : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// This is not clear to me... I from time to time the consumer code does not see 'FB_init' of 'TcoObject', that's why overridden here with super call...
{warning disable C0316}
SUPER^.FB_init(bInitRetains, bInCopyCode, ParentObject);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{d54cb0a4-e791-4c76-809b-ad871bded722}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task is aborted.
        </summary>
    </docu>
~*)
METHOD PROTECTED OnAbort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
RfidInOut.eCommand := RFID_FB_U.COMMAND.IDLE;
RfidInOut.xExecute := FALSE;
RfidInOut.xAbort   := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{552a849e-9936-4789-8f80-49b5ef932fa7}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Done``` state .
        </summary>
    </docu>
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
rfidInOut.xExecute := FALSE;
rfidInOut.eCommand := RFID_FB_U.COMMAND.IDLE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{1afccac9-a617-44b2-848f-4f5ae2754c3c}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Error``` state.
            <para>
                Do not confuse with <see cref="PlcDocu.TcoCore.TcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
            </para>
        </summary>
    </docu>
~*)
METHOD PROTECTED OnError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
IF _noTagFound THEN
    _eErrorID := RFID_FB_U.ERROR.COMMAND_NO_TAG_FOUND;
    // not implemented by Turck
ELSIF rfidInOut.eErrorID = 16#2901 THEN
    _eErrorID := RFID_FB_U.ERROR.COMMAND_ADDRESS_OUTSIDE_BLOCK_BOUNDARIES;
ELSE
    _eErrorID := rfidInOut.eErrorID;
END_IF

THIS^.Messenger.Build().Append('Rfid Schreib/Lesekopf Fehler : ').Append(to_string(THIS^._eErrorID)).As().AsError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{430d54ae-af66-4473-aa85-9b8323b4746f}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes ones when the task starts (at the moment of transition from the ```Requested``` state into the ```Busy``` state).
        </summary>
    </docu>
~*)
METHOD PROTECTED OnStart
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
rfidInOut.eCommand := RFID_FB_U.COMMAND.IDLE;
rfidInOut.xExecute := FALSE;
rfidInOut.xAbort   := FALSE;
_state             := 10;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{9c14e119-81df-4560-9074-8642b5c581f2}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
            <para>
                See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
            </para>
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
RfidInOut.eCommand := RFID_FB_U.COMMAND.IDLE;
RfidInOut.xExecute := FALSE;
RfidInOut.xAbort   := FALSE;
_noTagFound        := FALSE;
_eErrorID          := RFID_FB_U.ERROR.NO_ERROR;
SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>