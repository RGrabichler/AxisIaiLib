<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="WriteDataTask" Id="{90f619c8-3da7-4e5c-bafa-4e0fce1dd93f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK WriteDataTask EXTENDS TcoCore.TcoTask
VAR_IN_OUT
    rfidInOut : RfidInOut;
END_VAR
VAR_INPUT
    ActionDesc : STRING(25);
END_VAR
VAR
    _stringBuilder : TcoCore.StringBuilder;
    _state         : INT;

    _eErrorID   : RFID_FB_U.ERROR;
    _data       : Tc2_System.T_MaxString;
    _noTagFound : BOOL;

    _offSet : UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (THIS^.Execute()) THEN
    THIS^.ThrowWhen(rfidInOut.xError);

    CASE _state OF

        10:
            // Tag vorhanden
            IF NOT rfidInOut.xTP THEN
                THIS^.Messenger.Error
                (
                    _stringBuilder.Append(ActionDesc)
                        .Append('Tag nicht vorhanden bei Schreibversuch')
                        .ToString()
                );

                _noTagFound := true;
                ThrowWhen(TRUE);
            ELSE
                _state := 20;
            END_IF
        20:
            //Command setzen
            _offSet            := rfidInOut.udiStartAdress;
            rfidInOut.eCommand := RFID_FB_U.COMMAND.WRITE;
            _state             := 30;
        30:
            // Start der Operation
            rfidInOut.xExecute := TRUE;
            _data              := '';

            _state := 40;
        40:
            // Warte auf Ende Operation
            IF rfidInOut.xError THEN
                ;
            ELSIF rfidInOut.xDone THEN

                THIS^.DoneWhen(rfidInOut.xDone);
                THIS^.Messenger.Info('Schreiben der Daten erfolgreich');
                _state := 0;
            END_IF
    END_CASE
END_IF
]]></ST>
    </Implementation>
    <Folder Name="Status" Id="{3e3b40c2-06e4-4cc7-951b-b7c5a451fe8d}" />
    <Folder Name="TcOpen" Id="{0890f8d8-4ce4-4a51-9db3-107ec072ab05}" />
    <Property Name="ErrorId" Id="{064f0d91-ad9f-4901-b803-a5cc47d034df}" FolderPath="Status\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ErrorId : RFID_FB_U.ERROR]]></Declaration>
      <Get Name="Get" Id="{e750137c-7be4-42c3-a4ec-75390d2554b4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[{warning disable C0371}
ErrorId := _eErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{7cafd81b-48a2-4137-bfc6-08a31a889024}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode  : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// This is not clear to me... I from time to time the consumer code does not see 'FB_init' of 'TcoObject', that's why overridden here with super call...
{warning disable C0316}
SUPER^.FB_init(bInitRetains, bInCopyCode, ParentObject);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnAbort" Id="{8f724870-8199-4bfe-8a9e-eb860723f754}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task is aborted.
        </summary>
    </docu>
~*)
METHOD PROTECTED OnAbort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
RfidInOut.eCommand := RFID_FB_U.COMMAND.IDLE;
RfidInOut.xExecute := FALSE;
RfidInOut.xAbort   := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnDone" Id="{68c2f035-243a-4c7d-949b-77d4de88edd5}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Done``` state .
        </summary>
    </docu>
~*)
METHOD PROTECTED OnDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
rfidInOut.xExecute := FALSE;
rfidInOut.eCommand := RFID_FB_U.COMMAND.IDLE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnError" Id="{c54eae9e-97da-4397-bd27-e707b8a48183}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes when task reaches the ```Error``` state.
            <para>
                Do not confuse with <see cref="PlcDocu.TcoCore.TcoTask.WhileError()"/>, that is called cyclically until '''Error''' state is left.
            </para>
        </summary>
    </docu>
~*)
METHOD PROTECTED OnError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
IF _noTagFound THEN
    _eErrorID := RFID_FB_U.ERROR.COMMAND_NO_TAG_FOUND;
ELSE
    _eErrorID := rfidInOut.eErrorID;
END_IF

THIS^.Messenger.Build().Append('Rfid Schreib/Lesekopf Fehler : ').Append(to_string(THIS^._eErrorID)).As().AsError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{abc11b6b-10d2-41f4-afb9-25aefd8861c4}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Executes ones when the task starts (at the moment of transition from the ```Requested``` state into the ```Busy``` state).
        </summary>
    </docu>
~*)
METHOD PROTECTED OnStart
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
rfidInOut.eCommand := RFID_FB_U.COMMAND.IDLE;
rfidInOut.xExecute := FALSE;
rfidInOut.xAbort   := FALSE;
_state             := 10;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{47f03480-6a92-4925-8c92-459bd04226dd}" FolderPath="TcOpen\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
            <para>
                See also <see cref="PlcDocu.TcoCore.TcoTask.AutoRestorable()"/>
            </para>
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
RfidInOut.eCommand := RFID_FB_U.COMMAND.IDLE;
RfidInOut.xExecute := FALSE;
RfidInOut.xAbort   := FALSE;
_noTagFound        := FALSE;
_eErrorID          := RFID_FB_U.ERROR.NO_ERROR;
SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>