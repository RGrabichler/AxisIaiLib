<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="TcoDoubleCylinderBase" Id="{d24b89af-8f4d-439f-8847-83161f19728e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT TcoDoubleCylinderBase EXTENDS TcoCore.TcoComponent IMPLEMENTS ITcoCylinder
VAR_IN_OUT
    (*~
        <docu>
            <summary>
                Home position sensor 1.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Home position sensor#> - 1"}
    inoAtHomePos1 : BOOL;
    (*~
        <docu>
            <summary>
                Home position sensor 2.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Home position sensor#> - 2"}
    inoAtHomePos2 : BOOL;
    (*~
        <docu>
            <summary>
                Working position sensor 1.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Work position sensor#> - 1"}
    inoAtWorkPos1 : BOOL;
    (*~
        <docu>
            <summary>
                Working position sensor 1.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Work position sensor#> - 2"}
    inoAtWorkPos2 : BOOL;
END_VAR
VAR_IN_OUT
    (*~
        <docu>
            <summary>
                Move to working home position signal.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Move to home position actuator#>"}
    inoToHomePos : BOOL;
    (*~
        <docu>
            <summary>
                Move to working posistion signal.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Move to work position actuator#>"}
    inoToWorkPos : BOOL;
END_VAR
VAR
    (*~
        <docu>
            <summary>
                Home position sensor.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Home position sensor#>"}
    _atHomePos : BOOL;
    (*~
        <docu>
            <summary>
                Working position sensor.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Work position sensor#>"}
    _atWorkPos : BOOL;
    (*~
        <docu>
            <summary>
                Move to working home position signal.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Move to home position actuator#>"}
    _toHomePos : BOOL;
    (*~
        <docu>
            <summary>
                Move to working posistion signal.
            </summary>
        </docu>
    ~*)
    {attribute addProperty Name "<#Move to work position actuator#>"}
    _toWorkPos : BOOL;
END_VAR

VAR
    {attribute addProperty Name "<#Home sensor signal 1#>"}
    _atHomePos1SignalInfo : TcoCore.TcoSignalInfo;
    {attribute addProperty Name "<#Home sensor signal 2#>"}
    _atHomePos2SignalInfo : TcoCore.TcoSignalInfo;
    {attribute addProperty Name "<#Work sensor signal 1#>"}
    _atWorkPos1SignalInfo : TcoCore.TcoSignalInfo;
    {attribute addProperty Name "<#Work sensor signal 2#>"}
    _atWorkPos2SignalInfo : TcoCore.TcoSignalInfo;
    {attribute addProperty Name "<#Move to home position signal#>"}
    _toHomePosSignalInfo : TcoCore.TcoSignalInfo;
    {attribute addProperty Name "<#Move to work position signal#>"}
    _toWorkPosSignalInfo : TcoCore.TcoSignalInfo;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (__ISVALIDREF(inoAtHomePos1) AND __ISVALIDREF(inoAtHomePos2)) THEN
    _atHomePos := inoAtHomePos1 AND inoAtHomePos2;
    _atHomePos1SignalInfo.GetSignalInfo(SIZEOF(inoAtHomePos1), ADR(inoAtHomePos1));
    _atHomePos2SignalInfo.GetSignalInfo(SIZEOF(inoAtHomePos2), ADR(inoAtHomePos2));
END_IF;

IF (__ISVALIDREF(inoAtWorkPos1) AND __ISVALIDREF(inoAtWorkPos2)) THEN
    _atWorkPos := inoAtWorkPos1 AND inoAtWorkPos2;
    _atWorkPos1SignalInfo.GetSignalInfo(SIZEOF(inoAtWorkPos1), ADR(inoAtWorkPos1));
    _atWorkPos2SignalInfo.GetSignalInfo(SIZEOF(inoAtWorkPos2), ADR(inoAtWorkPos2));
END_IF;

IF (__ISVALIDREF(inoToHomePos)) THEN
    inoToHomePos := _toHomePos;
    _toHomePosSignalInfo.GetSignalInfo(SIZEOF(inoToHomePos), ADR(inoToHomePos));
END_IF;

IF (__ISVALIDREF(inoToWorkPos)) THEN
    inoToWorkPos := _toWorkPos;
    _toWorkPosSignalInfo.GetSignalInfo(SIZEOF(inoToWorkPos), ADR(inoToWorkPos));
END_IF;]]></ST>
    </Implementation>
    <Folder Name="Operations" Id="{99b14d5c-aefa-4774-8481-f0dc49830535}" />
    <Folder Name="States" Id="{4daffc87-7469-4683-9bdd-109120650833}" />
    <Folder Name="Tasks" Id="{1e3f2b6c-fcc7-4612-9183-1e001b27193c}" />
    <Property Name="AtHome" Id="{1b6e434d-a8e0-4a2f-aada-3658b38ac938}" FolderPath="States\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets whether the piston is in home position.
        </summary>
    </docu>
~*)
PROPERTY AtHome : bool]]></Declaration>
      <Get Name="Get" Id="{36d468a4-f9b3-4169-92e3-4bff4830f135}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AtHome := THIS^._atHomePos;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AtWork" Id="{0dd19172-b4e3-4ea3-8c58-fcc7a48f739d}" FolderPath="States\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets whether the piston is in work position.
        </summary>
    </docu>
~*)
PROPERTY AtWork : bool]]></Declaration>
      <Get Name="Get" Id="{7a984c9f-a966-401b-9130-4df2fc49af81}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AtWork := _atWorkPos;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{2e482733-382b-415c-ace4-ca51464e4be2}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode  : BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
    ParentObject : ITcoObject;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoveHomeTask" Id="{0bc66b5b-3105-48b5-b2ae-eec42fbe502f}" FolderPath="Tasks\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets the `MoveHomeTask` task that controls the moving of the cyclinder in home position.
            <remarks>
                <note type="important">
                    This is an abstract method and must be implemented in derived class.
                </note>
            </remarks>
        </summary>
    </docu>
~*)
PROPERTY PUBLIC ABSTRACT MoveHomeTask : TcoCore.ITcoTask]]></Declaration>
      <Get Name="Get" Id="{0b064266-9a6f-4adb-8bde-1704cf64304e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveToHome" Id="{de08af44-14b4-4241-8b98-9409ee7eac9e}" FolderPath="Operations\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Starts movement into home position.
        </summary>
    </docu>
~*)
METHOD MoveToHome : TcoCore.ITcoTaskStatus
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (MoveHomeTask <> 0) THEN
    MoveToHome := MoveHomeTask.Invoke();
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveToWork" Id="{249a32de-1d90-45d9-a60d-b5931c838e81}" FolderPath="Operations\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Starts movement into work position.
        </summary>
    </docu>
~*)
METHOD MoveToWork : TcoCore.ITcoTaskStatus
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (MoveWorkTask <> 0) THEN
    MoveToWork := MoveWorkTask.Invoke();
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MoveWorkTask" Id="{3ec7121e-9b0a-42af-84d4-a8fc29657f1e}" FolderPath="Tasks\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets the `MoveWorkTask` task that controls the moving of the cyclinder into work position.
            <remarks>
                <note type="important">
                    This is an abstract method and must be implemented in derived class.
                </note>
            </remarks>
        </summary>
    </docu>
~*)
PROPERTY PUBLIC ABSTRACT MoveWorkTask : TcoCore.ITcoTask]]></Declaration>
      <Get Name="Get" Id="{3da90a94-bd35-418c-a076-94c43d8936a7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Restore" Id="{91ab2f43-c429-4c14-afd3-d60fe3bcddfc}">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Restore all tasks of this instance into initial state.
        </summary>
    </docu>
~*)
METHOD Restore : ITcoRestorable
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (MoveHomeTask <> 0) THEN
    MoveHomeTask.Restore();
END_IF;

IF (MoveWorkTask <> 0) THEN
    MoveWorkTask.Restore();
END_IF;

IF (StopTask <> 0) THEN
    StopTask.Restore();
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ServiceMode" Id="{16e54aa1-104b-4f2b-bf3f-2af3ef6e0589}">
      <Declaration><![CDATA[METHOD PROTECTED ServiceMode
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{68759438-4ce4-4e21-aa88-910a29824e07}" FolderPath="Operations\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Stops cyclinder movement.
             <remarks>
                <note type="important">
                    This method switched off the signals for the movement of the piston in both direction.
                    However depending on the pnemumatics configuration the movement may contintue if designed in that way.
                    THIS IS NOT A SAFETY FUCTION!
                </note>
            </remarks>
        </summary>
    </docu>
~*)
METHOD Stop : TcoCore.ITcoTaskStatus
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (StopTask <> 0) THEN
    Stop := StopTask.Invoke();
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Property Name="StopTask" Id="{0eac6f66-4262-4c7b-b922-43e3c8c34dd7}" FolderPath="Tasks\">
      <Declaration><![CDATA[(*~
    <docu>
        <summary>
            Gets the `StopTask` task that controls the stopping cyclinder movement.
            <remarks>
                <note type="important">
                    This is an abstract method and must be implemented in derived class.
                </note>
            </remarks>
        </summary>
    </docu>
~*)
PROPERTY PUBLIC ABSTRACT StopTask : TcoCore.ITcoTask]]></Declaration>
      <Get Name="Get" Id="{83d6edec-1482-4875-8431-e46d9abc05d4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>